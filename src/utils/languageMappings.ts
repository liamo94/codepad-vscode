// Reference: https://github.com/jincheng9/markdown_supported_languages

const extensionMap: Record<string, string> = {
  js: "js",
  json: "json",
  ts: "ts",
  tsx: "tsx",
  jsx: "jsx",
  mjs: "js",
  feature: "Cucumber",
  abap: "abap",
  adb: "ada",
  ads: "ada",
  ada: "ada",
  ahk: "ahk",
  ahkl: "ahk",
  htaccess: "apacheconf",
  applescript: "applescript",
  as: "as",
  as3: "as3",
  asy: "asy",
  sh: "bash",
  ksh: "bash",
  bash: "bash",
  ebuild: "bash",
  eclass: "bash",
  bat: "bat",
  cmd: "bat",
  befunge: "befunge",
  bmx: "blitzmax",
  boo: "boo",
  bf: "brainfuck",
  b: "brainfuck",
  c: "c",
  h: "c",
  cfm: "cfm",
  cfml: "cfm",
  cfc: "cfm",
  tmpl: "cheetah",
  spt: "cheetah",
  cl: "cl",
  lisp: "cl",
  el: "cl",
  clj: "clojure",
  cljs: "clojure",
  cmake: "cmake",
  ["CMakeLists.txt"]: "cmake",
  coffee: "coffeescript",
  ["sh-session"]: "console",
  control: "control",
  cpp: "cpp",
  hpp: "cpp",
  ["c++"]: "cpp",
  ["h++"]: "cpp",
  cc: "cpp",
  hh: "cpp",
  cxx: "cpp",
  hxx: "cpp",
  pde: "cpp",
  cs: "csharp",
  css: "css",
  pyx: "cython",
  pxd: "cython",
  pxi: "cython",
  d: "d",
  di: "d",
  pas: "delphi",
  diff: "diff",
  patch: "diff",
  dpatch: "dpatch",
  darcspatch: "dpatch",
  duel: "duel",
  jbst: "duel",
  dylan: "dylan",
  dyl: "dylan",
  erb: "erb",
  ["erl-sh"]: "erl",
  erl: "erlang",
  hrl: "erlang",
  evoque: "evoque",
  factor: "factor",
  flx: "felix",
  flxh: "felix",
  f: "fortran",
  f90: "fortran",
  go: "go",
  s: "gas",
  ["S"]: "gas",
  kid: "genshi",
  vert: "glsl",
  frag: "glsl",
  geo: "glsl",
  plot: "gnuplot",
  plt: "gnuplot",
  man: "groff",
  ["(1234567)"]: "groff",
  haml: "haml",
  hs: "haskell",
  html: "html",
  htm: "html",
  xhtml: "html",
  xslt: "html",
  hx: "hx",
  hy: "hybris",
  hyb: "hybris",
  ini: "ini",
  kt: "kotlin",
  cfg: "ini",
  io: "io",
  ik: "ioke",
  weechatlog: "irc",
  jade: "jade",
  java: "java",
  jsp: "jsp",
  ["Ihs"]: "Ihs",
  ll: "llvm",
  lgt: "logtalk",
  lua: "lua",
  wlua: "lua",
  mak: "make",
  makefile: "make",
  mao: "mako",
  maql: "maql",
  mhtml: "mason",
  mc: "mason",
  mi: "mason",
  md: "markdown",
  mo: "modelica",
  def: "modula2",
  mod: "modula2",
  moo: "moocode",
  mu: "mupad",
  mxml: "mxml",
  myt: "myghty",
  asm: "nasm",
  ["ASM"]: "nasm",
  ns2: "newspeak",
  objdump: "objdump",
  m: "objectivec",
  j: "objectivej",
  ml: "ocaml",
  mli: "ocaml",
  mll: "ocaml",
  mly: "ocaml",
  ooc: "ooc",
  pl: "perl",
  pm: "perl",
  php: "php",
  ["php(345)"]: "php",
  ps: "postscript",
  eps: "postscript",
  pot: "pot",
  po: "pot",
  pov: "pov",
  inc: "pov",
  prolog: "prolog",
  pro: "prolog",
  properties: "properties",
  proto: "protobuf",
  py3tb: "py3tb",
  pytb: "pytb",
  py: "python",
  pyw: "python",
  sc: "python",
  tac: "python",
  ["R"]: "R",
  rb: "rb",
  rbw: "rb",
  rake: "rb",
  rbx: "rb",
  duby: "rb",
  ["Rout"]: "rconsole",
  r: "rebol",
  r3: "rebol",
  cw: "redcode",
  rhtml: "rhtml",
  rst: "rst",
  rest: "rst",
  sass: "sass",
  scala: "scala",
  scaml: "scaml",
  scm: "scheme",
  scss: "scss",
  st: "smalltalk",
  tpl: "smarty",
  sql: "sql",
  ["sqlite3-console"]: "sqlite3",
  ssp: "ssp",
  tcl: "tcl",
  tcsh: "tcsh",
  csh: "tcsh",
  toc: "tex",
  txt: "text",
  vim: "vim",
  xml: "xml",
  xsl: "xsl",
  xsd: "xml",
  wsdl: "xml",
  rss: "xml",
  xquery: "xquery",
  xqy: "xquery",
  yml: "yaml",
  yaml: "yaml",
  swift: "swift",
  rs: "rust",
  vb: "vb",
} as const;

export const supportedLanguages = [...new Set(Object.values(extensionMap))];

const specialFiles: Record<string, string> = {
  ["Dockerfile"]: "dockerfile",
  ["SConstruct"]: "python",
  ["SConscript"]: "python",
  ["Makefile"]: "make",
  ["makefile"]: "make",
  ["GNUmakefile"]: "make",
  ["CMakeLists.txt"]: "cmake",
  ["apache.conf"]: "apacheconf",
  ["apache2.conf"]: "apacheconf",
  autohandler: "mason",
  dhandler: "mason",
  ["Rakefile"]: "rb",
  ["sources.list"]: "sourceslist",
  autodelegate: "myghty",
};

export const getLanguageFromAlias = (fileName: string, extension?: string) => {
  if (!extension) return specialFiles[fileName] || "";

  return specialFiles[fileName] || extensionMap[extension.substring(1)] || "";
};
